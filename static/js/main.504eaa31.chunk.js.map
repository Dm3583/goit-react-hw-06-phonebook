{"version":3,"sources":["redux/phonebook/contacts-actions.js","redux/phonebook/contacts-reducers.js","redux/store.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactsList/ListItem/ListItem.js","components/ContactsList/ContactsList.js","components/App.js","index.js"],"names":["addContact","createAction","deleteContact","changeFilter","items","createReducer","actions","state","contactsList","contactToAdd","name","find","contact","alert","payload","filter","id","_","combineReducers","contactsPersistConfig","key","storage","blacklist","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","contacts","persistReducer","contactsReducer","devTools","process","persistor","persistStore","INITIAL_STATE","number","ContactForm","handleInput","e","stateField","target","setState","value","handleSubmit","preventDefault","uuid","props","clearInput","this","onSubmit","className","type","onChange","pattern","title","required","Component","connect","dispatch","contactActions","contactsActions","ListItem","onClick","getFilteredContacts","allContacts","normalizedFilter","toLowerCase","length","includes","map","App","console","log","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.504eaa31.chunk.js","sourcesContent":["import { createAction } from '@reduxjs/toolkit';\n\nconst addContact = createAction('contacts/add');\nconst deleteContact = createAction('contacts/delete');\nconst changeFilter = createAction('contacts/changeFilter');\n\nexport default { addContact, deleteContact, changeFilter };\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport actions from './contacts-actions';\n\nconst addContact = (contactsList, contactToAdd) => {\n  const { name } = contactToAdd;\n  if (contactsList.find(contact => contact.name === name)) {\n    alert(`${name} is already in contacts`);\n    return contactsList;\n  } else {\n    return [...contactsList, contactToAdd];\n  }\n};\n\nconst items = createReducer([], {\n  [actions.addContact]: (state, { payload }) => addContact(state, payload),\n  [actions.deleteContact]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\n\nconst filter = createReducer('', {\n  [actions.changeFilter]: (_, { payload }) => payload,\n});\n\nexport default combineReducers({\n  items,\n  filter,\n});\n","import {\n  configureStore,\n  getDefaultMiddleware,\n  combineReducers,\n} from '@reduxjs/toolkit';\nimport logger from 'redux-logger';\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport contactsReducer from './phonebook/contacts-reducers';\n\nconst contactsPersistConfig = {\n  key: 'contacts',\n  storage,\n  blacklist: ['filter'],\n};\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  logger,\n];\n\nconst store = configureStore({\n  reducer: {\n    contacts: persistReducer(contactsPersistConfig, contactsReducer),\n  },\n  middleware,\n  devTools: process.env.NODE_ENV === 'development',\n});\n\nconst persistor = persistStore(store);\n\nexport default { store, persistor };\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport contactActions from '../../redux/phonebook/contacts-actions';\r\nimport { v4 as uuid } from 'uuid';\r\nimport PropTypes from 'prop-types';\r\nimport './ContactForm.scss';\r\n\r\nconst INITIAL_STATE = {\r\n  name: '',\r\n  number: '',\r\n};\r\n\r\nclass ContactForm extends Component {\r\n  static propTypes = {\r\n    addContact: PropTypes.func.isRequired,\r\n  };\r\n\r\n  state = {\r\n    ...INITIAL_STATE,\r\n  };\r\n\r\n  handleInput = e => {\r\n    const stateField = e.target.name;\r\n    this.setState({ [stateField]: e.target.value });\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    const { name, number } = this.state;\r\n\r\n    if (!name || !number) {\r\n      alert(`Complete the form please`);\r\n      return;\r\n    }\r\n\r\n    const contact = {\r\n      id: uuid(),\r\n      name,\r\n      number,\r\n    };\r\n    this.props.addContact(contact);\r\n    this.clearInput();\r\n  };\r\n\r\n  clearInput = () => {\r\n    this.setState({ ...INITIAL_STATE });\r\n  };\r\n\r\n  render() {\r\n    const { name, number } = this.state;\r\n    const { handleInput, handleSubmit } = this;\r\n\r\n    return (\r\n      <form onSubmit={handleSubmit} className=\"ContactForm\">\r\n        <label>\r\n          <p className=\"ContactForm__label\">Name</p>\r\n          <input\r\n            className=\"ContactForm__text-input\"\r\n            type=\"text\"\r\n            value={name}\r\n            onChange={handleInput}\r\n            name=\"name\"\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n          />\r\n        </label>{' '}\r\n        <label>\r\n          <p className=\"ContactForm__label\">Number</p>\r\n          <input\r\n            className=\"ContactForm__text-input\"\r\n            type=\"tel\"\r\n            value={number}\r\n            onChange={handleInput}\r\n            name=\"number\"\r\n            pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\r\n            title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\r\n            required\r\n          />\r\n        </label>\r\n        <div className=\"ContactForm__btnWrapper\">\r\n          <button className=\"ContactForm__btn\" type=\"submit\">\r\n            Add contact\r\n          </button>\r\n        </div>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  addContact: contact => dispatch(contactActions.addContact(contact)),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(ContactForm);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport contactsActions from '../../redux/phonebook/contacts-actions';\r\nimport PropTypes from 'prop-types';\r\nimport './Filter.scss';\r\n\r\nconst Filter = ({ value, onChange }) => {\r\n  return (\r\n    <label>\r\n      <p>Find contacts by name</p>\r\n      <input\r\n        className=\"Filter__input\"\r\n        type=\"text\"\r\n        onChange={onChange}\r\n        name=\"filter\"\r\n        value={value}\r\n      />\r\n    </label>\r\n  );\r\n};\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  value: state.contacts.filter,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onChange: e => dispatch(contactsActions.changeFilter(e.target.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './ListItem.scss';\n\nconst ListItem = ({ contact, deleteContact }) => {\n  const { id, name, number } = contact;\n  return (\n    <li className=\"ListItem\">\n      <span>\n        {name}: {number}\n      </span>\n      <button\n        className=\"ListItem__button\"\n        type=\"button\"\n        onClick={() => deleteContact(id)}\n      >\n        Delete\n      </button>\n    </li>\n  );\n};\n\nListItem.propTypes = {\n  contact: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }),\n  deleteContact: PropTypes.func.isRequired,\n};\n\nexport default ListItem;\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport contactsActions from '../../redux/phonebook/contacts-actions';\r\nimport ListItem from './ListItem';\r\nimport PropTypes from 'prop-types';\r\nimport './ContactsList.scss';\r\n\r\nconst ContactsList = ({ contacts, deleteContact }) => {\r\n  return (\r\n    <ul className=\"ContactsList\">\r\n      {contacts.map(contact => (\r\n        <ListItem\r\n          key={contact.id}\r\n          contact={contact}\r\n          deleteContact={deleteContact}\r\n        />\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nContactsList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n    }),\r\n  ),\r\n  deleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\nconst getFilteredContacts = (allContacts, filter) => {\r\n  const normalizedFilter = filter.toLowerCase();\r\n  if (allContacts.length > 0) {\r\n    return allContacts.filter(({ name }) =>\r\n      name.toLowerCase().includes(normalizedFilter),\r\n    );\r\n  } else {\r\n    return allContacts;\r\n  }\r\n};\r\n\r\nconst mapStateToProps = ({ contacts: { items, filter } }) => ({\r\n  contacts: getFilteredContacts(items, filter),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  deleteContact: id => dispatch(contactsActions.deleteContact(id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsList);\r\n","import React from 'react';\nimport ContactForm from './ContactForm';\nimport Filter from './Filter';\nimport ContactsList from './ContactsList';\n\n// localStorage.setItem(\n//   'contacts',\n//   JSON.stringify([\n//     { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n//     { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n//     { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n//     { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n//   ]),\n// );\n// localStorage.removeItem('contacts')\n\nconst App = () => (\n  <div>\n    <h1>Phonebook</h1>\n    <ContactForm />\n    <Filter />\n    <h2>Contacts</h2>\n    <ContactsList />\n  </div>\n);\n\nexport default App;\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport store from './redux/store';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nconsole.log(store);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}